fn main() {
    type Code = u16;
    type Symbol = u8;
    let compressed_exe = include_bytes!("../../rotating_square.psexe.hf");
    let mut exe = Vec::new();
    let mut remaining_bits = 16;
    for w in compressed_exe.chunks(2) {
        while remaining_bits != 0 {
            let mut w = (w[0] as u32) | (w[1] as u32) << 8;
            while !codes.contains(&(w >> 16)) {
                w <<= 1;
                remaining_bits -= 1;
            }
            exe.push(symbols[codes.iter().position(|&x| x == w >> 16).unwrap()]);
            w &= 0x0000_ffff;
        }
    }
    std::fs::write("../unzipped.psexe", exe);
}
const codes: [u32; 228] = [
    0x2,
    0x31,
    0x33,
    0x37,
    0x60,
    0x68,
    0x6c,
    0x74,
    0x7a,
    0x7d,
    0xc8,
    0xd3,
    0xd4,
    0xe2,
    0xe4,
    0xe5,
    0xe6,
    0xeb,
    0xef,
    0xf6,
    0xf8,
    0xfc,
    0xfe,
    0xff,
    0x187,
    0x192,
    0x195,
    0x196,
    0x197,
    0x1a4,
    0x1a5,
    0x1ad,
    0x1ae,
    0x1b4,
    0x1c6,
    0x1da,
    0x1dc,
    0x1dd,
    0x1e1,
    0x1e2,
    0x1e5,
    0x1ee,
    0x1fb,
    0x30a,
    0x30b,
    0x30c,
    0x326,
    0x327,
    0x354,
    0x356,
    0x357,
    0x35f,
    0x36b,
    0x36c,
    0x36d,
    0x36e,
    0x386,
    0x387,
    0x38e,
    0x39e,
    0x39f,
    0x3a8,
    0x3ab,
    0x3b0,
    0x3b2,
    0x3b6,
    0x3b7,
    0x3c6,
    0x3c8,
    0x3c9,
    0x3cc,
    0x3ce,
    0x3cf,
    0x3df,
    0x3e5,
    0x3e7,
    0x610,
    0x611,
    0x613,
    0x61a,
    0x61b,
    0x650,
    0x651,
    0x653,
    0x6bc,
    0x6bd,
    0x6d4,
    0x6d5,
    0x6de,
    0x6df,
    0x708,
    0x709,
    0x70b,
    0x71e,
    0x71f,
    0x738,
    0x739,
    0x73a,
    0x73b,
    0x752,
    0x753,
    0x762,
    0x766,
    0x780,
    0x781,
    0x783,
    0x78e,
    0x78f,
    0x79a,
    0x7bd,
    0x7c8,
    0x7c9,
    0x7cc,
    0xca4,
    0xd54,
    0xd55,
    0xd56,
    0xd57,
    0xd60,
    0xd61,
    0xd62,
    0xd63,
    0xd64,
    0xd65,
    0xd66,
    0xd67,
    0xe00,
    0xe01,
    0xe02,
    0xe03,
    0xe04,
    0xe05,
    0xe06,
    0xe07,
    0xea8,
    0xea9,
    0xeab,
    0xec6,
    0xece,
    0xecf,
    0xf05,
    0xf36,
    0xf37,
    0xf79,
    0xf9a,
    0xf9b,
    0x1848,
    0x1849,
    0x184a,
    0x184b,
    0x194a,
    0x1c14,
    0x1c15,
    0x1c16,
    0x1c17,
    0x1c28,
    0x1c29,
    0x1c2a,
    0x1c2b,
    0x1d54,
    0x1d8e,
    0x1d8f,
    0x1e08,
    0x1e09,
    0x1ef0,
    0x1fa0,
    0x1fa1,
    0x1fa2,
    0x1fa3,
    0x1fa4,
    0x1fa5,
    0x1fa6,
    0x1fa7,
    0x1fac,
    0x1fad,
    0x1fae,
    0x1faf,
    0x3296,
    0x3297,
    0x3830,
    0x3831,
    0x3832,
    0x3833,
    0x3834,
    0x3835,
    0x3836,
    0x3837,
    0x3839,
    0x383c,
    0x383d,
    0x383e,
    0x383f,
    0x3aaa,
    0x3de2,
    0x3de3,
    0x3f50,
    0x3f51,
    0x3f52,
    0x3f53,
    0x3f54,
    0x3f55,
    0x3f56,
    0x3f57,
    0x7040,
    0x7041,
    0x7042,
    0x7043,
    0x7044,
    0x7045,
    0x7046,
    0x7047,
    0x7048,
    0x7049,
    0x704a,
    0x704b,
    0x704c,
    0x704d,
    0x704e,
    0x704f,
    0x7070,
    0x7071,
    0x7074,
    0x7075,
    0x7076,
    0x7077,
    0x7556,
    0xeaae,
    0xeaaf,
];
const symbols: [u8; 228] = [
    0x00,
    0x08,
    0x01,
    0x25,
    0x0c,
    0x40,
    0x3c,
    0x02,
    0x20,
    0x24,
    0xa0,
    0x34,
    0x18,
    0x8f,
    0x27,
    0x14,
    0x28,
    0x04,
    0x21,
    0xaf,
    0x03,
    0x10,
    0x80,
    0xff,
    0xe8,
    0xa1,
    0x60,
    0x81,
    0x2b,
    0x26,
    0xe0,
    0xc1,
    0x48,
    0xf0,
    0x23,
    0x2c,
    0xbf,
    0xbd,
    0xbe,
    0x47,
    0x30,
    0xc0,
    0x05,
    0x98,
    0x8e,
    0x0a,
    0xc3,
    0x72,
    0x44,
    0x38,
    0x1c,
    0xb4,
    0xa4,
    0x46,
    0x90,
    0x1f,
    0x2a,
    0x55,
    0x07,
    0x64,
    0x2d,
    0x0f,
    0x45,
    0x09,
    0x33,
    0x8c,
    0x06,
    0xc2,
    0x43,
    0x42,
    0xf8,
    0x82,
    0x61,
    0x41,
    0x22,
    0x7f,
    0xa5,
    0x85,
    0xfe,
    0x2e,
    0x1e,
    0xa8,
    0x94,
    0xaa,
    0x70,
    0xf9,
    0x6f,
    0x3a,
    0x39,
    0x1a,
    0xa3,
    0x65,
    0xae,
    0x19,
    0x11,
    0x68,
    0x29,
    0xc5,
    0x84,
    0xa7,
    0x4a,
    0x0b,
    0x63,
    0x57,
    0x49,
    0xb0,
    0x0e,
    0x88,
    0x12,
    0xc6,
    0xc4,
    0xac,
    0x15,
    0x4c,
    0xb8,
    0xb3,
    0xe3,
    0xc7,
    0x87,
    0x75,
    0xb2,
    0xad,
    0x16,
    0x13,
    0x54,
    0x31,
    0x74,
    0x6c,
    0xde,
    0xcc,
    0x58,
    0x50,
    0x69,
    0x62,
    0xa2,
    0x78,
    0xb1,
    0x3d,
    0x3f,
    0x35,
    0x86,
    0x73,
    0x6e,
    0x83,
    0x2f,
    0x17,
    0x52,
    0x4e,
    0x77,
    0x76,
    0x0d,
    0xba,
    0x9c,
    0xf4,
    0xc8,
    0x5a,
    0x4b,
    0x92,
    0x79,
    0x1b,
    0xd2,
    0xa6,
    0xe7,
    0xe5,
    0x36,
    0x8a,
    0x6d,
    0x91,
    0x8d,
    0x53,
    0x51,
    0x66,
    0x5c,
    0xd0,
    0xb5,
    0xe1,
    0xd8,
    0x56,
    0x3b,
    0xc9,
    0xbc,
    0xd7,
    0xce,
    0x7c,
    0x6a,
    0x99,
    0x93,
    0xfd,
    0xf3,
    0xeb,
    0xfc,
    0xf6,
    0x32,
    0x4d,
    0x1d,
    0xe4,
    0xd9,
    0xf2,
    0xe6,
    0xb6,
    0x9b,
    0xd4,
    0xb7,
    0xb9,
    0x96,
    0xd1,
    0xca,
    0x71,
    0x6b,
    0x8b,
    0x89,
    0xe9,
    0xdc,
    0xec,
    0xea,
    0xd5,
    0xd3,
    0xda,
    0xd6,
    0xfb,
    0xfa,
    0xf1,
    0xee,
    0xf7,
    0xf5,
    0x4f,
    0x67,
    0x59,
];
