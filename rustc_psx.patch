diff --git a/compiler/rustc_target/src/spec/mipsel_sony_psx.rs b/compiler/rustc_target/src/spec/mipsel_sony_psx.rs
new file mode 100644
index 00000000000..58c0321448a
--- /dev/null
+++ b/compiler/rustc_target/src/spec/mipsel_sony_psx.rs
@@ -0,0 +1,55 @@
+use crate::spec::{
+    LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target, TargetOptions,
+};
+
+// The PSX has custom linker requirements.
+const LINKER_SCRIPT: &str = include_str!("./mipsel_sony_psx_linker_script.ld");
+
+// These options are mostly taken from the mipsel-sony-psp and msp430-none-elf
+// configurations with some changes specific to MIPS I.
+pub fn target() -> Target {
+    let mut pre_link_args = LinkArgs::new();
+    pre_link_args.insert(LinkerFlavor::Lld(LldFlavor::Ld), vec!["--emit-relocs".to_string()]);
+
+    Target {
+        llvm_target: "mipsel-sony-psx".to_string(),
+        pointer_width: 32,
+        data_layout: "e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".to_string(),
+        arch: "mips".to_string(),
+
+        options: TargetOptions {
+            endian: "little".to_string(),
+            c_int_width: "32".to_string(),
+            os: "none".to_string(),
+            env: "psx".to_string(),
+            vendor: "sony".to_string(),
+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+            cpu: "mips1".to_string(),
+            executables: true,
+            linker: Some("rust-lld".to_owned()),
+            linker_is_gnu: true,
+            relocation_model: RelocModel::Static,
+            eliminate_frame_pointer: false,
+            dynamic_linking: false,
+            function_sections: true,
+
+            // PSX doesn't natively support floats.
+            features: "+soft-float".to_string(),
+
+            // The MIPS I in the PSX doesn't have a SYNC instruction so we have
+            // to disable the Atomic* API.
+            // See https://github.com/rust-lang/rust/issues/54511 for more info.
+            max_atomic_width: Some(0),
+
+            // Taken from msp430-none-elf target configuration.
+            panic_strategy: PanicStrategy::Abort,
+            trap_unreachable: false,
+
+            // PSX does not support trap-on-condition instructions.
+            llvm_args: vec!["-mno-check-zero-division".to_string()],
+            pre_link_args,
+            link_script: Some(LINKER_SCRIPT.to_string()),
+            ..Default::default()
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld b/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld
new file mode 100644
index 00000000000..d9e91f9a66b
--- /dev/null
+++ b/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld
@@ -0,0 +1,35 @@
+MEMORY
+{
+    /* RAM through the KSEG0 region: 2MB minus 64K reserved for the BIOS */
+    RAM (rwx) : ORIGIN = 0x80000000 + 0x10000, LENGTH = 0x200000 - 0x10000
+}
+
+ENTRY(main);
+
+SECTIONS
+{
+	.text :
+	{
+		*(.text*)
+	} > RAM
+
+	/* The PSX doesn't have an MMU so we don't really care about
+	 * RO vs RW
+	 */
+	.data :
+	{
+		*(.data*)
+		*(.rodata*)
+	} > RAM
+
+	/* This section must be stored in the "memfill" part of the
+	 * header to be initialized to 0 at bootup by the BIOS/loader.
+	 */
+	.bss :
+	{
+		*(.bss*)
+		*(COMMON)
+	} > RAM
+   /DISCARD/ :
+   {
+       *(.MIPS.abiflags)
+       *(.reginfo)
+   }
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index 1d3e61c4992..6c3a5ac0cef 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -653,6 +653,7 @@ supported_targets! {
     ("powerpc64-wrs-vxworks", powerpc64_wrs_vxworks),
 
     ("mipsel-sony-psp", mipsel_sony_psp),
+    ("mipsel-sony-psx", mipsel_sony_psx),
     ("mipsel-unknown-none", mipsel_unknown_none),
     ("thumbv4t-none-eabi", thumbv4t_none_eabi),
 }

