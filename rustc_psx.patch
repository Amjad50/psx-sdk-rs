diff --git a/compiler/rustc_target/src/spec/mipsel_sony_psx.rs b/compiler/rustc_target/src/spec/mipsel_sony_psx.rs
new file mode 100644
index 00000000000..1a90f0603c8
--- /dev/null
+++ b/compiler/rustc_target/src/spec/mipsel_sony_psx.rs
@@ -0,0 +1,59 @@
+use crate::spec::{
+    FramePointer, LinkArgs, LinkerFlavor, LldFlavor, PanicStrategy, RelocModel, Target,
+    TargetOptions,
+};
+
+// The PSX has custom linker requirements.
+const LINKER_SCRIPT: &str = include_str!("./mipsel_sony_psx_linker_script.ld");
+
+// These options are mostly taken from the mipsel-sony-psp and msp430-none-elf
+// configurations with some changes specific to MIPS I.
+pub fn target() -> Target {
+    let mut pre_link_args = LinkArgs::new();
+    pre_link_args.insert(
+        LinkerFlavor::Lld(LldFlavor::Ld),
+        vec!["--oformat".to_string(), "binary".to_string()],
+    );
+
+    Target {
+        llvm_target: "mipsel-sony-psx".to_string(),
+        pointer_width: 32,
+        data_layout: "e-m:m-p:32:32-i8:8:32-i16:16:32-i64:64-n32-S64".to_string(),
+        arch: "mips".to_string(),
+
+        options: TargetOptions {
+            c_int_width: "32".to_string(),
+            os: "none".to_string(),
+            env: "psx".to_string(),
+            vendor: "sony".to_string(),
+            linker_flavor: LinkerFlavor::Lld(LldFlavor::Ld),
+            cpu: "mips1".to_string(),
+            executables: true,
+            linker: Some("rust-lld".to_owned()),
+            linker_is_gnu: true,
+            relocation_model: RelocModel::Static,
+            frame_pointer: FramePointer::NonLeaf,
+            dynamic_linking: false,
+            function_sections: true,
+            exe_suffix: ".exe".to_string(),
+
+            // PSX doesn't natively support floats.
+            features: "+soft-float".to_string(),
+
+            // The MIPS I in the PSX doesn't have a SYNC instruction so we have
+            // to disable the Atomic* API.
+            // See https://github.com/rust-lang/rust/issues/54511 for more info.
+            max_atomic_width: Some(0),
+
+            // Taken from msp430-none-elf target configuration.
+            panic_strategy: PanicStrategy::Abort,
+            trap_unreachable: false,
+
+            // PSX does not support trap-on-condition instructions.
+            llvm_args: vec!["-mno-check-zero-division".to_string()],
+            pre_link_args,
+            link_script: Some(LINKER_SCRIPT.to_string()),
+            ..Default::default()
+        },
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld b/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld
new file mode 100644
index 00000000000..d5745bd3ea5
--- /dev/null
+++ b/compiler/rustc_target/src/spec/mipsel_sony_psx_linker_script.ld
@@ -0,0 +1,83 @@
+RAM_BASE = 0x80000000;
+RAM_SIZE = 2M;
+BIOS_SIZE = 64K;
+HEADER_SIZE = 2K;
+LOAD_ADDR = RAM_BASE + BIOS_SIZE;
+STACK_INIT = RAM_BASE + 0x001FFF00;
+
+MEMORY {
+    HEADER    : ORIGIN = RAM_BASE + BIOS_SIZE - HEADER_SIZE, LENGTH = HEADER_SIZE
+    RAM (rwx) : ORIGIN = RAM_BASE + BIOS_SIZE, LENGTH = RAM_SIZE - BIOS_SIZE
+}
+
+ENTRY(_start)
+
+SECTIONS {
+    .psx_exe_header : {
+        /* ASCII ID "PS-X EXE" */
+        KEEP(*(.psx_exe));
+        /* Unused */
+        LONG(0);
+        LONG(0);
+        /* Initial PC */
+        LONG(ABSOLUTE(_start));
+        /* Initial GP/R28 */
+        LONG(0);
+        /* Load address */
+        LONG(LOAD_ADDR);
+        /* File size excluding the 2K header */
+        __text_len = __text_end - __text_start;
+        __data_len = __data_end - __data_start;
+        LONG(__text_len + __data_len);
+        /* Unused */
+        LONG(0);
+        LONG(0);
+        LONG(0);
+        LONG(0);
+        /* Initial SP/R29 and FP/R30 base */
+        LONG(STACK_INIT);
+        /* Initial SP/R29 and FP/R30 offset */
+        LONG(0);
+        /* Unused */
+        LONG(0);
+        LONG(0);
+        LONG(0);
+        LONG(0);
+        LONG(0);
+        /* ASCII region marker */
+        KEEP(*(.region));
+        . = ALIGN(2048);
+    } > HEADER
+
+    .text : {
+        __text_start = .;
+        *(.text*)
+        __text_end = .;
+    } > RAM
+
+    /* The PSX doesn't have an MMU so we don't really care about RO vs RW */
+    .data : {
+        __data_start = .;
+        *(.data*)
+        *(.rodata*)
+        *(.got)
+        /* Padding to a multiple of 2K is required for loading from ISO */
+        . = ALIGN(2048);
+        __data_end = .;
+    } > RAM
+
+    .bss (NOLOAD) : {
+        __bss_start = .;
+        *(.bss*)
+        __bss_end = .;
+    } > RAM
+
+    /* Leak up to 3 bytes to make the heap word-aligned */
+    . = ALIGN(4);
+    __heap_start = .;
+
+    /DISCARD/ : {
+        *(.MIPS.abiflags)
+        *(.reginfo)
+    }
+}
diff --git a/compiler/rustc_target/src/spec/mod.rs b/compiler/rustc_target/src/spec/mod.rs
index ece704d7700..f47e9bca9ea 100644
--- a/compiler/rustc_target/src/spec/mod.rs
+++ b/compiler/rustc_target/src/spec/mod.rs
@@ -999,6 +999,7 @@ fn $module() {
     ("armv7a-kmc-solid_asp3-eabihf", armv7a_kmc_solid_asp3_eabihf),
 
     ("mipsel-sony-psp", mipsel_sony_psp),
+    ("mipsel-sony-psx", mipsel_sony_psx),
     ("mipsel-unknown-none", mipsel_unknown_none),
     ("thumbv4t-none-eabi", thumbv4t_none_eabi),
 
