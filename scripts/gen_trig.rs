use std::env::args;
use std::f64::consts::FRAC_PI_8;
use std::fs;

fn main() {
    let high_precision = match args().skip(1).next() {
        Some(arg) => arg == "high",
        _ => false,
    };
    let cos_entry_ty = if high_precision { "f16" } else { "u8" };
    let cos_idx_fn = if high_precision {
        "pub fn cosine_table(idx: usize) -> f16 {\
         \n   COSINE_TABLE[idx]\n\
         }"
    } else {
        "pub fn cosine_table(idx: usize) -> f16 {\
         \n    if idx == 0 {\
         \n        f16(0x1_000)\
         \n    } else {\
         \n        f16(((COSINE_TABLE[idx] as u16) << 4) as i16)\
         \n    }\
         \n}"
    };
    let mut cosine_table = format!(
        "// This file was automatically generated by gen_trig.rs\n\n\
         use crate::graphics::f16;\n\n\
         {}\n\
         pub const COSINE_TABLE_SIZE: usize = 0x4000;\n\
         const COSINE_TABLE: [{}; COSINE_TABLE_SIZE] = [",
        cos_idx_fn, cos_entry_ty
    );
    let mut line_length = 0;
    for x in 0..=(u16::MAX / 4) {
        let radians = f64::from(x) * FRAC_PI_8 / 4096.0;
        let float = f64::cos(radians);
        let fixed = (float * 4096.0).trunc() as i16;
        let table_entry = if high_precision {
            format!(" f16({:?}),", fixed)
        } else {
            format!(" {:?},", ((fixed as u16) >> 4) as u8)
        };
        if line_length + table_entry.len() > 100 {
            line_length = 0;
        }
        if line_length == 0 {
            cosine_table += "\n";
            cosine_table += "   ";
            line_length += 4;
        }
        cosine_table += &table_entry;
        line_length += table_entry.len();
    }
    cosine_table += "\n];\n";
    let cos_table_file = "trig.rs";
    fs::write(cos_table_file, cosine_table)
        .unwrap_or_else(|_| panic!("Unable to write to {}", cos_table_file));
}
