use std::env::args;
use std::f64::consts::FRAC_PI_8;
use std::fs;

fn main() {
    let table_size = match args().skip(1).next() {
        Some(arg) => arg.parse::<u16>().expect("Unable to parse u16 argument"),
        None => 16,
    } * 1024;


    let cos_idx_fn = "pub fn cosine_table(idx: usize) -> f16 {\
         \n    if idx == 0 {\
         \n        f16(0x1_000)\
         \n    } else {\
         \n        f16(((COSINE_TABLE[idx] as u16) << 4) as i16)\
         \n    }\
         \n}";
    let mut cosine_table = format!(
        "// This file was automatically generated by gen_trig.rs\n\n\
         use crate::graphics::f16;\n\n\
         {}\n\
         pub const COSINE_TABLE_SIZE: usize = {};\n\
         const COSINE_TABLE: [u8; COSINE_TABLE_SIZE] = [",
        cos_idx_fn, table_size,
    );
    let mut line_length = 0;
    for x in 0..table_size {
        let radians = f64::from(x * (16 * 1024 / table_size)) * FRAC_PI_8 / 4096.0;
        let float = f64::cos(radians);
        let fixed = (float * 4096.0).trunc() as i16;
        let table_entry = format!(" {:?},", ((fixed as u16) >> 4) as u8);
        if line_length + table_entry.len() > 100 {
            line_length = 0;
        }
        if line_length == 0 {
            cosine_table += "\n";
            cosine_table += "   ";
            line_length += 4;
        }
        cosine_table += &table_entry;
        line_length += table_entry.len();
    }
    cosine_table += "\n];\n";
    let cos_table_file = "trig.rs";
    fs::write(cos_table_file, cosine_table)
        .unwrap_or_else(|_| panic!("Unable to write to {}", cos_table_file));
}
